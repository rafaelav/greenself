package com.greenself.daogen;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.greenself.daogen.Task;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TASK.
*/
public class TaskDao extends AbstractDao<Task, Long> {

    public static final String TABLENAME = "TASK";

    /**
     * Properties of entity Task.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Actvity = new Property(1, String.class, "actvity", false, "ACTVITY");
        public final static Property RecurrenceDB = new Property(2, String.class, "recurrenceDB", false, "RECURRENCE_DB");
        public final static Property Applicability = new Property(3, Boolean.class, "applicability", false, "APPLICABILITY");
        public final static Property Status = new Property(4, Boolean.class, "status", false, "STATUS");
        public final static Property Info = new Property(5, String.class, "info", false, "INFO");
        public final static Property Date = new Property(6, java.util.Date.class, "date", false, "DATE");
    };


    public TaskDao(DaoConfig config) {
        super(config);
    }
    
    public TaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TASK' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ACTVITY' TEXT NOT NULL ," + // 1: actvity
                "'RECURRENCE_DB' TEXT," + // 2: recurrenceDB
                "'APPLICABILITY' INTEGER," + // 3: applicability
                "'STATUS' INTEGER," + // 4: status
                "'INFO' TEXT," + // 5: info
                "'DATE' INTEGER);"); // 6: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TASK'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Task entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getActvity());
 
        String recurrenceDB = entity.getRecurrenceDB();
        if (recurrenceDB != null) {
            stmt.bindString(3, recurrenceDB);
        }
 
        Boolean applicability = entity.getApplicability();
        if (applicability != null) {
            stmt.bindLong(4, applicability ? 1l: 0l);
        }
 
        Boolean status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(5, status ? 1l: 0l);
        }
 
        String info = entity.getInfo();
        if (info != null) {
            stmt.bindString(6, info);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(7, date.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Task readEntity(Cursor cursor, int offset) {
        Task entity = new Task( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // actvity
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // recurrenceDB
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // applicability
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // status
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // info
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)) // date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Task entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setActvity(cursor.getString(offset + 1));
        entity.setRecurrenceDB(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setApplicability(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setStatus(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setInfo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDate(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Task entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Task entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
